// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	applyconfigurationmusicsportsheaddevv1 "github.com/refat75/codegen/pkg/generated/applyconfiguration/music.sportshead.dev/v1"
	scheme "github.com/refat75/codegen/pkg/generated/clientset/versioned/scheme"
	musicsportsheaddevv1 "github.com/refat75/codegen/pkg/apis/music.sportshead.dev/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// SongsGetter has a method to return a SongInterface.
// A group's client should implement this interface.
type SongsGetter interface {
	Songs(namespace string) SongInterface
}

// SongInterface has methods to work with Song resources.
type SongInterface interface {
	Create(ctx context.Context, song *musicsportsheaddevv1.Song, opts metav1.CreateOptions) (*musicsportsheaddevv1.Song, error)
	Update(ctx context.Context, song *musicsportsheaddevv1.Song, opts metav1.UpdateOptions) (*musicsportsheaddevv1.Song, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*musicsportsheaddevv1.Song, error)
	List(ctx context.Context, opts metav1.ListOptions) (*musicsportsheaddevv1.SongList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *musicsportsheaddevv1.Song, err error)
	Apply(ctx context.Context, song *applyconfigurationmusicsportsheaddevv1.SongApplyConfiguration, opts metav1.ApplyOptions) (result *musicsportsheaddevv1.Song, err error)
	SongExpansion
}

// songs implements SongInterface
type songs struct {
	*gentype.ClientWithListAndApply[*musicsportsheaddevv1.Song, *musicsportsheaddevv1.SongList, *applyconfigurationmusicsportsheaddevv1.SongApplyConfiguration]
}

// newSongs returns a Songs
func newSongs(c *MusicV1Client, namespace string) *songs {
	return &songs{
		gentype.NewClientWithListAndApply[*musicsportsheaddevv1.Song, *musicsportsheaddevv1.SongList, *applyconfigurationmusicsportsheaddevv1.SongApplyConfiguration](
			"songs",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *musicsportsheaddevv1.Song { return &musicsportsheaddevv1.Song{} },
			func() *musicsportsheaddevv1.SongList { return &musicsportsheaddevv1.SongList{} },
		),
	}
}
