// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	musicsportsheaddevv1 "github.com/refat75/codegen/pkg/generated/applyconfiguration/music.sportshead.dev/v1"
	typedmusicsportsheaddevv1 "github.com/refat75/codegen/pkg/generated/clientset/versioned/typed/music.sportshead.dev/v1"
	v1 "github.com/refat75/k8s-crd/pkg/apis/music.sportshead.dev/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeSongs implements SongInterface
type fakeSongs struct {
	*gentype.FakeClientWithListAndApply[*v1.Song, *v1.SongList, *musicsportsheaddevv1.SongApplyConfiguration]
	Fake *FakeMusicV1
}

func newFakeSongs(fake *FakeMusicV1, namespace string) typedmusicsportsheaddevv1.SongInterface {
	return &fakeSongs{
		gentype.NewFakeClientWithListAndApply[*v1.Song, *v1.SongList, *musicsportsheaddevv1.SongApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("songs"),
			v1.SchemeGroupVersion.WithKind("Song"),
			func() *v1.Song { return &v1.Song{} },
			func() *v1.SongList { return &v1.SongList{} },
			func(dst, src *v1.SongList) { dst.ListMeta = src.ListMeta },
			func(list *v1.SongList) []*v1.Song { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.SongList, items []*v1.Song) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
